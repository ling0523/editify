import{_ as o,c as a,a2 as t,o as d}from"./chunks/framework.DFElQYQe.js";const f=JSON.parse('{"title":"简介","description":"","frontmatter":{"title":"简介"},"headers":[],"relativePath":"guide/introduction.md","filePath":"guide/introduction.md","lastUpdated":1732972668000}'),c={name:"guide/introduction.md"};function i(r,e,n,s,u,l){return d(),a("div",null,e[0]||(e[0]=[t('<h1 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p><code>kaitify-vue</code> 是一套基于 <code>kaitify</code> 富文本编辑器核心库进行开发和设计的富文本编辑器，使用 <code>Vue3</code> 框架作视图渲染，并提供相关的组件供开发者使用</p><p>本文档不再对 <code>kaitify</code> 进赘述，关于编辑器底层的核心理念，在 <code>kaitify</code> 文档中都有讲述，如果你对 <code>kaitify</code> 有兴趣，可以访问 <a href="https://www.so-better.cn/kaitify-core/" target="_blank" rel="noreferrer">@kaitify/core 文档</a>，获取进一步的了解</p><h2 id="结合-vue3" tabindex="-1">结合 Vue3 <a class="header-anchor" href="#结合-vue3" aria-label="Permalink to &quot;结合 Vue3&quot;">​</a></h2><p><code>kaitify</code> 是一个基于原生 <code>js</code> 的富文本编辑器核心库，在 <code>Vue3</code> 项目中进行使用的话，可能需要进行一些组件的封装，并且需要为更好地与 <code>Vue3</code> 结合而进行开发与设计</p><p><code>kaitify-vue</code> 的目的就是为了帮助开发者解决这一问题，减少一些基本工作，同时提供了可以直接拿来使用的必要组件，并且设计了一套基本的 <code>UI</code> 样式</p><h2 id="视图渲染" tabindex="-1">视图渲染 <a class="header-anchor" href="#视图渲染" aria-label="Permalink to &quot;视图渲染&quot;">​</a></h2><p><code>kaitify</code> 的视图渲染采用完全原生 <code>js</code> 的写法，我们称之为 <code>js-render</code>，而在 <code>kaitify-vue</code> 中，我们自定义了视图渲染的逻辑，采用 <code>Vue3</code> 的 <code>VNode</code> 来作视图渲染</p><p>因此编辑器本身不关心视图如何进行渲染，只需要专注于内部逻辑的处理，视图渲染的部分我们完全交给 <code>Vue3</code> 去处理</p><div class="tip custom-block github-alert"><p class="custom-block-title">怎么样？</p><p>接下来去更详细地了解 <code>kaitify-vue</code> 是怎么使用的吧~</p></div>',11)]))}const h=o(c,[["render",i]]);export{f as __pageData,h as default};
